version: '3.8'

services:
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'  # static ID for single-node KRaft cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - event-pipeline
    healthcheck:
      test: ["CMD", "bash", "-lc", "cub kafka-ready -b localhost:9092 1 30"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: eventpipeline
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./monitoring/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - event-pipeline
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d eventpipeline"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  signal-emitter:
    build:
      context: ./signal-emitter
      dockerfile: Dockerfile
    container_name: signal-emitter
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SIGNALS_PER_SECOND: 1000
    networks:
      - event-pipeline
    ports:
      - "8001:8000"
      - "8011:8001"

  signal-processor:
    build:
      context: ./signal-processor
      dockerfile: Dockerfile
    container_name: signal-processor
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/eventpipeline
      BATCH_SIZE: 100
    networks:
      - event-pipeline
    ports:
      - "8002:8000"
      - "8012:8001"

  anomaly-detector:
    build:
      context: ./anomaly-detector
      dockerfile: Dockerfile
    container_name: anomaly-detector
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/eventpipeline
    networks:
      - event-pipeline
    ports:
      - "8003:8000"
      - "8013:8001"

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./init-kafka-topics.sh:/init-kafka-topics.sh
    command: ["/bin/bash", "/init-kafka-topics.sh"]
    networks:
      - event-pipeline

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - event-pipeline

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - event-pipeline

networks:
  event-pipeline:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: