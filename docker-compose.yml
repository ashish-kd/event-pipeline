# Removed version: '3.8' - no longer required in modern Docker Compose

services:
  # Redis for session management and caching
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - event-pipeline
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Traefik for TLS termination and load balancing
  traefik:
    image: traefik:v3.0
    container_name: traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security/tls-config.yml:/etc/traefik/traefik.yml
      - ./certs:/certs
    networks:
      - event-pipeline
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=admin@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/certs/acme.json

  # JWT Authentication Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    depends_on:
      redis:
        condition: service_healthy
    environment:
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-super-secret-jwt-key-change-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      SERVICE_NAME: auth-service
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    networks:
      - event-pipeline
    ports:
      - "8004:8000"  # Auth API
      - "8014:8001"  # Prometheus metrics
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=Host(`localhost`) && PathPrefix(`/auth`)"
      - "traefik.http.routers.auth-service.entrypoints=websecure"
      - "traefik.http.routers.auth-service.tls.certresolver=letsencrypt"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'  # static ID for single-node KRaft cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - event-pipeline
    healthcheck:
      test: ["CMD", "bash", "-lc", "cub kafka-ready -b localhost:9092 1 30"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: eventpipeline
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./monitoring/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c shared_preload_libraries=pg_stat_statements
    networks:
      - event-pipeline
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d eventpipeline"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  signal-emitter:
    build:
      context: ./signal-emitter
      dockerfile: Dockerfile
    container_name: signal-emitter
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
      schema-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SIGNALS_PER_SECOND: ${SIGNALS_PER_SECOND:-1000}
      PRODUCER_BATCH_SIZE: ${PRODUCER_BATCH_SIZE:-100}
      PRODUCER_LINGER_MS: ${PRODUCER_LINGER_MS:-5}
      PRODUCER_COMPRESSION_TYPE: ${PRODUCER_COMPRESSION_TYPE:-snappy}
    networks:
      - event-pipeline
    ports:
      - "8001:8000"
      - "8011:8001"

  signal-processor:
    build:
      context: ./signal-processor
      dockerfile: Dockerfile
    container_name: signal-processor
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
      schema-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/eventpipeline
      BATCH_SIZE: ${PROCESSOR_BATCH_SIZE:-100}
      MAX_POLL_RECORDS: ${PROCESSOR_MAX_POLL_RECORDS:-500}
      FETCH_MIN_BYTES: ${CONSUMER_FETCH_MIN_BYTES:-1024}
      FETCH_MAX_WAIT_MS: ${CONSUMER_FETCH_MAX_WAIT_MS:-5}
      DB_POOL_MIN_SIZE: ${DB_POOL_MIN_SIZE:-5}
      DB_POOL_MAX_SIZE: ${DB_POOL_MAX_SIZE:-20}
    networks:
      - event-pipeline
    ports:
      - "8002:8000"
      - "8012:8001"

  anomaly-detector:
    build:
      context: ./anomaly-detector
      dockerfile: Dockerfile
    container_name: anomaly-detector
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
      schema-init:
        condition: service_completed_successfully
      debezium-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/eventpipeline
    networks:
      - event-pipeline
    ports:
      - "8003:8000"
      - "8013:8001"

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./init-kafka-topics.sh:/init-kafka-topics.sh
    command: ["/bin/bash", "/init-kafka-topics.sh"]
    networks:
      - event-pipeline

  schema-init:
    image: python:3.11-slim
    container_name: schema-init
    depends_on:
      schema-registry:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    volumes:
      - ./register-schemas.py:/register-schemas.py
      - ./schemas:/schemas
    command: ["/bin/bash", "-c", "pip install requests && python /register-schemas.py"]
    networks:
      - event-pipeline

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - event-pipeline

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - event-pipeline
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  debezium-connect:
    image: debezium/connect:2.4.2.Final
    container_name: debezium-connect
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: debezium-outbox
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_status
      # Postgres connector settings
      DATABASE_HOSTNAME: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_DBNAME: eventpipeline
    networks:
      - event-pipeline
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  debezium-init:
    image: alpine:3.18
    container_name: debezium-init
    depends_on:
      debezium-connect:
        condition: service_healthy
    volumes:
      - ./configure-debezium.sh:/src/configure-debezium.sh:ro
    command: ["/bin/sh", "-c", "apk add --no-cache curl && /bin/sh /src/configure-debezium.sh"]
    networks:
      - event-pipeline

  dlq-recovery:
    build:
      context: ./dlq-recovery-service
      dockerfile: Dockerfile
    container_name: dlq-recovery
    depends_on:
      kafka:
        condition: service_healthy
      schema-init:
        condition: service_completed_successfully
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
      DLQ_MAX_RETRIES: 3
      DLQ_BATCH_SIZE: 10
      DLQ_RETRY_DELAY_BASE: 2.0
      DLQ_RECOVERY_INTERVAL: 5.0
    networks:
      - event-pipeline
    ports:
      - "8005:8000"  # Health check and API
      - "8015:8004"  # Prometheus metrics

  grafana:
    image: grafana/grafana:10.1.5
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - event-pipeline

networks:
  event-pipeline:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  redis_data: